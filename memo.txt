<pid>
・プロセスに割り振られた管理用の番号。
・「Process ID」の略。
・プロセスは「メモリを使って、なんかやっているプログラムの一つ一つ」です。
・プログラムは動いていればメモリを使っています。
よくわからなければ「実行中のプログラム」と読み替えて下さい。

＜signal関数＞
・シグナルを処理する方法を設定する。
・include <signal.h>
・引数：sig（シングル番号）、func（シグナルハンドラ）
・戻り値：成功した場合は、引数sigのシグナル番号に以前に設定されていたシグナルハンドラが返される。
失敗した場合は、SIG ERRを返す。

＜sigemptyset関数＞
・setで与えられたシグナル集合を空に初期化し、シグナルが一つも含まれていない状態にする。
・戻り値：成功すれば0を、エラーの場合は−1を返す。

＜sigaddset関数＞
・既にset記録済みのシグナルのセットに、シグナルを追加します。
・シグナル・セットを操作する関数のファミリーの一部です。
・シグナル・セットとは、シグナル・グループを１つのプロセスにより経過の記録をとるためのデータ・オブジェクトです。
・戻り値：成功すれば0を、エラーの場合は−1を返す。

＜sigaction関数＞
・特定のシグナルを受信した際のプロセスの動作を変更するのに使用される。
・戻り値：成功すれば0を、エラーの場合は-1を返す。errnoにエラーを示す値をセットする。

＜kill関数＞
・プロセスにシグナルを送ります。
・#include <signal.h>
 int kill(pid_t pid, int sig);
 ・pidはシグナルの送信先を指定します。sigは送信するシグナルの種類を指定します。
 ・戻り値：処理が成功した場合は0が、エラーの場合は-1を返します。

 第1引数のpidは指定する値により、意味が異なります。
 ・正の値を指定した場合は、pidをプロセスIDとみなして、そのプロセスにシグナルを送ります。
 ・0を指定した場合は、呼び出し元プロセスのプロセス・グループに属する全てのプロセスに
 シグナルを送ります。
 ・-1を指定した場合は、呼び出し元プロセスがシグナルを送る許可を持つ全てのプロセスに
 シグナルを送ります。
・−1より小さな値を指定した場合は、pidの絶対値のプロセス・グループに属する全てのプロセスに
シグナルを送ります。

＜getpid関数＞
・現在実行しているプロセスのプロセスIDを返します。
・include <unistd.h>
・pid_t getpid(void)
・引数：なし
・戻り値：現在実行しているプロセスのプロセスID

＜pause関数＞
・シグナルを待つ
・include <unistd.h>
・int pause(void)
・呼び出したプロセス（またはスレッド）を、そのプロセスを終了させたり、シグナル捕捉関数が
起動されるようなシグナルが配送されるまで、スリープさせる。
・戻り値：pause()が返るのは、シグナルを受け取りシグナル捕獲関数から返った場合だけである。
この場合はpause()は-1を返し、errnoにEINTRが設定される。

＜sleep関数＞
・指定の秒数の間だけ休止する。
・include <unistd.h>
・unsigned int sleep(unsigned int seconds)
・戻り値：要求された時間が過ぎた場合は0を返す。
呼び出しがシングルハンドラーに割り込まれた場合は、休止の残り時間を返す。

＜usleep関数＞
・マイクロ秒単位で実行を延期する。
・include <unistd.h>
・int usleep(useconds_t usec)
・usleep()関数は（少なくとも）usecマイクロ秒の間、呼び出し元スレッドの実行を延期する。
システムの動作状況や呼び出しによる時間の消費やシステムタイマーの粒度によって、停止時間は設定
した値よりも少し延ばされるかもしれない。
・戻り値：usleep()関数は成功すると0を返す。エラーの場合、-1が返され、errnoにエラーの
原因を示す値が設定される。

＜exit関数＞
・この関数はプログラムの正常終了を引き起こす。２度以上exit()が呼ばれた場合の動作は未定義である。
・include <stdlib.h>
・void exit (int status)
・引数：終了の意味合いを示す値。0あるいはEXIT SUCCESSは成功終了を表す。EXIT FAILUREは失敗終了を表す。
これら以外の値を返した場合の動作は、処理系定義。
・戻り値：なし（呼び出しもとに戻ることがない）