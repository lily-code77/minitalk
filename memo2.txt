UNIXでは非同期で起きる可能性のあるイベントについては、「シグナル」という仕組みを作って、
それを非同期にシグナルを受け取って処理できるようにしたのだ（イベントドリブン(イベント駆動型)プログラミング）。
＜この非同期で起きる可能性のあるイベントには次のようなものがある。＞

・SIGINT：Ctrl + C が押された。デフォルトは終了。
・SIGALRM：アラームタイマーの時間満了。デフォルトは無視。
・SIGCHLD：そのプロセスが起動した子プロセスが終了した。デフォルトは無視。
・SIGFPE：浮動小数点演算のエラー及び整数の0による割算の検出。デフォルトは終了。
・SIGSEGV：メモリアクセスについて違反があった。いわゆる「セグフォ」が起きたのである。当然デフォルトは終了。
・SIGTSTP：Ctrl + Zが押された。デフォルトはプロセスを一時停止する。いわゆる「バックグラウンドに回す」である。
・SIGCONT:「バックグラウンドに回った」プロセスを再開する。シェルで「fg」と叩くとか。

●1バイトは8bit

<Description>
●server
・The server takes signals(SIGUSR1, SIGUSR2) sent from client
・Translate a signal to one bit(SIGUSR1 is ON and SIGUSR2 is OFF) of one byte.
・Collect 8 signals(bits) and write them with one byte to STDOUT.

●client
・The client sends signals to process of server.
・Send one byte divided into 8 bits.
・One bit described with signal(ON bit is SIGUSR1 and OFF bit is SIGUSR2).
・Send all bytes of string and then, send a \0 character to notify that string is ended.

*ON → 1, OFF → 0

<ビット演算子、シフト演算子＞
・ビット演算とは、2進数の0か1で表現するビット単位で計算することです。フラグの確認でよく使われたり、
PCの仕組みを理解するためには欠かせない項目です。
・PCは2進数で計算する方が単純な計算式になるため、処理速度が非常に速くなる傾向があります。数百万から
数千万画素を加工する場合などは時間がかかる処理をビット演算で計算することも多いです。また、メモリ使用量も
少ない傾向がありますので、マイコンのようにメモリが少ないハードウェアを使う場合はビット演算で計算することも多いです。
・ビット演算子とは、ビットを計算させるための演算子。

●ビット演算子の種類
＆：　AND。両方１の時に１、それ以外は0にする演算子。
｜：　OR。両方0の時のみ0。それ以外は1にする演算子。
＾：　XOR。両方が異なる値の時に1。それ以外は0にする演算子。
〜：　NOT。0を1、1は0に反転させる演算子。
>>:　シフト演算で右にずらす。10進数でいう桁移動のようなもので、全てのビットの桁を移動する。符号を
　　　考慮するかしないかで演算の方法が異なる。（負の数のシフト演算では、右シフトの場合のみシフトされた分左側に1が
　　　追加されることに注意して下さい）。
<<:　シフト演算で左へずらす。

●シフト演算の使い方
シフト演算とはビットの桁移動です。2進数を基準にして考えるので、左にシフトすると値が2倍になり、
右にシフトすると値が1/2になります。また、シフト演算で桁があふれた場合には場合には正しい値にはならないので注意が必要です。

○左シフト（<<）演算子
左シフト演算子（<<）はA<<1と表記され、2進数で表記されたAを左へ1ビット桁移動をする演算子です。左シフトの時は、
左側にあふれたビットは削除され、右側に0が追加されます。
例えば、numに2進数「0000 1110」が入り、numを1ビット左シフトを行った結果を変数resultに代入し表示しています。
この2進数を左へ1桁シフトすると、左へ桁をずらすので「0001 1100」になります。右端には0が追加されます。
これを10進数に直すと、元の値「14」を2倍した値の「28」になります。

○右シフト（>>）演算子
右シフト演算子（>>）は A >> 1と表記され、2進数で表記されたAを右へ1ビット桁移動をする演算子です。
右シフトの時は、右側にあふれたビットは削除され、左側に0が追加されます。
例えば、numに2進数「0000 1110」が入り、numを1ビット右シフトを行った結果を変数resultに代入し表示をしています。
右シフトは、右に桁を移動させます。
「0000 1110」を右に1桁シフトするので、「0000 0111」になります。右端の桁は削除され、左端には0が追加されます。
これを10進数に直すと、元の値「14」を1/2にした値の「7」になります。